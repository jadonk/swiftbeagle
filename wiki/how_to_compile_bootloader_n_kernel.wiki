#summary How to compile our modified code

If you don't want to compile from source, use the compiled binaries from the [http://code.google.com/p/swiftbeagle/downloads/list download page].

You need a toolchain to compile code for arm processor. I recommend [http://www.codesourcery.com/sgpp/lite/arm/ the one] from Code Sourcery (choose the GNU/Linux version in download page).

== signGP ==

Enter the directory and 

{{{
gcc signGP.c -o signGP
}}}

You will need signGP to sign x-load.bin.

== x-loader ==

Enter the directory and 

{{{
$ make omap3530beagle_config
$ make 
$ ./signGP x-load.bin
}}}

x-load.bin.ift will be generated. The difference between x-load.bin and x-load.bin.ift is the later has an additional 8-byte header to tell how large x-load.bin is. 

== u-boot ==

Enter the directory and 

{{{
$ make omap3_beagle_config
$ make
}}}

u-boot.bin will be generated under the directory.

== Linux Kernel ==

Enter the kernel directory and

{{{
$ copy my.config .config
$ make uImage
}}}

If you have muti-core processor, using 'make uImage -j n' (n is the number of CPU cores) will speed up the compilation a lot. uImage will be under arch/arm/boot/ directory.

== uclibc and busybox ==

Enter the buildroot directory and 

{{{
$ make menuconfig
$ make
}}}

will generate the toolchain you need. Copy uClibc.config to toolchain_build_arm/uclibc_xxx directory and change name to .config. Copy busybox.config to project_build_arm/uclibc/busybox_xxx directory and change name to .config. Then in the buildroot directory issue

{{{
$ make uclibc-clean
$ make uclibc
$ make busybox-clean
$ make busybox
}}}

Your rootfs (with uclibc and busybox) will be under project_build_arm/uclibc/root directory.